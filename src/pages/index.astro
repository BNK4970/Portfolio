---
import Layout from "../layouts/Layout.astro";
import NavBar from "../components/NavBar.astro";
import Hero from "../components/section/Hero.astro";
import Projects from "../components/section/Projects.astro";
import Contact from "../components/section/Contact.astro";
---

<Layout title="Welcome to Astro.">
  <main
    class="h-auto px-[15%] grid grid-cols-1 grid-rows-5 gap-20 place-items-center text-darkForeground"
  >
    <NavBar />
    <!-- hero -->
    <section
      class="w-full h-screen grid grid-cols-2 grid-rows-1 place-items-center gap-8"
    >
      <Hero/>
    </section>

    <!-- about -->
    <section class="">à propos</section>

    <!-- compétences -->
    <section>compétences</section>

    <!-- projets -->
    <section class="w-full grid grid-cols-3 grid-rows-[1fr_2fr] gap-4 h-fit">
      <Projects/>
    </section>

    <!-- contact -->
    <section id="contact" class="grid grid-cols-2">
      <Contact/>
    </section>
  </main>
  <canvas id="canvas" class="absolute top-0 left-0 -z-50"></canvas>
  <script>
    import * as THREE from 'three';
    // Sélectionne le canvas par son ID
const canvas = document.getElementById('canvas');
if (!canvas) {
    throw new Error('Canvas element with id "canvas" not found.');
}

// Création de la scène
const scene = new THREE.Scene();

// Création de la caméra
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 5;

// Création du rendu
const renderer = new THREE.WebGLRenderer({canvas, antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.devicePixelRatio);

// Création d'une géométrie (ex: particules)
const geometry = new THREE.BufferGeometry();
const vertices = [];
for (let i = 0; i < 1000; i++) {
    vertices.push((Math.random() - 0.5) * 10);
    vertices.push((Math.random() - 0.5) * 10);
    vertices.push((Math.random() - 0.5) * 10);
}
geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));

const material = new THREE.PointsMaterial({ color: 0x8a2be2, size: 0.01 });
const particles = new THREE.Points(geometry, material);
scene.add(particles);

// Fonction d'animation
function animate() {
    requestAnimationFrame(animate);
    particles.rotation.y += 0.0001;
    particles.rotation.x += 0.0001;
    particles.rotation.z -= 0.0001;
    renderer.render(scene, camera);
}

// Ajuster la taille du rendu lors du redimensionnement de la fenêtre
window.addEventListener('resize', () => {
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
});

animate();

  </script>
</Layout>

<style>
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
  canvas {
    position: fixed;
    top: 0;
    left: 0;
  }
</style>
